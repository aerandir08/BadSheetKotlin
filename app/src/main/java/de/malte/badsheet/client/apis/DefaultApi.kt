/**
 * BadSheet API
 * Backend for the app BadSheet to get team and player information from turnier.de
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Player
import io.swagger.client.models.Team

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "http://45.94.211.170/v1") : ApiClient(basePath) {

    /**
     * Returns all players of a team.
     * 
     * @param teamname Name of the team. 
     * @return kotlin.Array<Player>
     */
    @Suppress("UNCHECKED_CAST")
    fun playersTeamnameGet(teamname: kotlin.String): kotlin.Array<Player> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/players/{teamname}".replace("{" + "teamname" + "}", "$teamname")
        )
        val response = request<kotlin.Array<Player>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Player>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Returns a list of all teams.
     * 
     * @return kotlin.Array<Team>
     */
    @Suppress("UNCHECKED_CAST")
    fun teamsGet(): kotlin.Array<Team> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/teams"
        )
        val response = request<kotlin.Array<Team>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Team>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Updates the list of teams in the backend.
     * 
     * @return void
     */
    fun teamsPost(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/teams"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
